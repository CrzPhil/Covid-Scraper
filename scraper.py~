from urllib.request import urlopen, Request
import ssl
import re
from bs4 import BeautifulSoup
import csv
import datetime
import sys

# Due to mod_security, or some other feature that blocks known spider/bot user agents,
# we set a known browser user agent (here Mozilla)
ssl._create_default_https_context = ssl._create_unverified_context

url = Request('https://www.worldometers.info/coronavirus/#countries', headers={'User-Agent': 'Mozilla/5.0'})
page = urlopen(url)
html = page.read().decode("utf-8")
soup = BeautifulSoup(html, "html.parser")

# Specify datetime format for filenames later
format = "%m-%d-%Y"
strftime(format)

# All of the above returns us the pure HTML of the site


class Country:
    def __init__(self, name, tot_cases, new_cases, tot_deaths, new_deaths, tot_rec, active_cases, serious, tot_per_mil,
                 death_per_mil, tot_tests, test_per_mil, rank):
        self.name = name
        self.tot_cases = tot_cases
        self.new_cases = new_cases
        self.tot_deaths = tot_deaths
        self.new_deaths = new_deaths
        self.tot_rec = tot_rec
        self.active_cases = active_cases
        self.serious = serious
        self.tot_per_mil = tot_per_mil
        self.death_per_mil = death_per_mil
        self.tot_tests = tot_tests
        self.test_per_mil = test_per_mil
        self.rank = rank


def getWorldwide():
    # Get Worldwide Data
    totals_raw = soup.find_all('div', class_='maincounter-number')

    # Get total Covid Cases
    total_cases_string = str(totals_raw[0])
    total_cases = re.search(">(.+?) <", total_cases_string).group(1)

    # Get total Deaths
    total_deaths_string = str(totals_raw[1])
    total_deaths = re.search(">(.+?)<", total_deaths_string).group(1)

    # Get total Recoveries
    total_recoveries_string = str(totals_raw[2])
    total_recoveries = re.search(">(.+?)<", total_recoveries_string).group(1)

    # Active/Closed Cases
    active_raw = soup.find_all('div', class_='col-md-6')
    active_string = str(active_raw[0])
    active_cases = re.search("\"number-table-main\">(.+?)<", active_string).group(1)

    closed_raw = soup.find_all('div', class_='col-md-6')
    closed_string = str(closed_raw[1])
    closed_cases = re.search("\"number-table-main\">(.+?)<", closed_string).group(1)

    # Print Data
    print("Total Worldwide Cases: " + total_cases)
    print("Total Worldwide Deaths: " + total_deaths)
    print("Total Worldwide Recoveries: " + total_recoveries)
    print("Total Worldwide Closed Cases: " + closed_cases)
    print("Current Worldwide Active Cases: " + active_cases)
    print("\n")


def prepareData():
    # Find and parse table
    table = soup.find("tbody")
    data = []
    for row in table.findAll("tr"):
        cells = row.findAll("td")
        # Strip/Cleanup the entries
        cells = [ele.text.strip() for ele in cells]
        # print(cells)
        data.append(cells)
    return data

# each sub-array of cells returns the following, which might come in usefully when visualising data:
# ['num_in_list', 'name', 'tot_cases', 'new_cases', 'tot_deaths', 'new_deaths', 'tot_recovered', 'some_number',
# 'active_cases', 'serious_cases', 'tot_per_mil', 'death_per_mil', 'tot_tests', 'tests_per_mil', 'population',
# 'continent', 'some_number', 'some_number', 'some_number']
# Could later add another 'population' field in the Country Class and do some Data Visualisation and ML


def addData(countryarray, data):
    # Control starts at 8 since the first 8 values sub-arrays are data of continents
    control = 8
    for i in range(len(countryarray)):
        for j in range(14):
            if j == 0:
                countryarray[i].rank = data[control][j]
            elif j == 1:
                countryarray[i].name = data[control][j]
            elif j == 2:
                countryarray[i].tot_cases = data[control][j]
            elif j == 3:
                countryarray[i].new_cases = data[control][j]
            elif j == 4:
                countryarray[i].tot_deaths = data[control][j]
            elif j == 5:
                countryarray[i].new_deaths = data[control][j]
            elif j == 6:
                countryarray[i].tot_rec = data[control][j]
            # There is a weird value which isn't visible in the table so we skip it as it's unknown
            elif j == 7:
                pass
            elif j == 8:
                countryarray[i].active_cases = data[control][j]
            elif j == 9:
                countryarray[i].serious = data[control][j]
            elif j == 10:
                countryarray[i].tot_per_mil = data[control][j]
            elif j == 11:
                countryarray[i].death_per_mil = data[control][j]
            elif j == 12:
                countryarray[i].tot_tests = data[control][j]
            elif j == 13:
                countryarray[i].test_per_mil = data[control][j]

        # Increment control to point to next sub-array
        control += 1


def main():
    all_data = prepareData()
    # Since the first 8 entries of the 'cells' array are continents, we skip them here
    countries = [Country(None, None, None, None, None, None, None, None, None, None, None, None, None)
                 for i in range(len(all_data) - 8)]
    addData(countries, all_data)

    # Here begins the Front-end Messages etc.
    print("-------------------------------------------------------")
    print("[+] Covid-19 real-time data scraper")
    getWorldwide()

    running = True
    
    print("Type the name of the country (i.e Greece, USA, S. Korea), that you want more data about below.")
    print("Type 'exit' to leave the program.")
    print("Type 'worldwide' for the overall data.")
    print("Type 'download' for a csv file with the data.")
    print("\n")


    while running:
        print("\n")
        query = input("Query:  ")

        if query == "exit":
            running = False
        elif query == "worldwide":
            getWorldwide()
        elif query == "download":
            print(". . . Downloading Data . . .")
            file_name = datetime.now().now.strftime(format) 
            extension = ".csv"
            with open(file_name + extension, 'w') as file:
                writer = csv.writer(file, delimiter=',')
                # Create a new variable for the data list to add headings
                downloadable_data = all_data
                headers = ['Rank', 'Country', 'Total Cases', 'New Cases', 'Total Deaths', 'New Deaths',
                           'Total Recovered', 'N/A', 'Active Cases', 'Serious/Critical',
                           'Total Cases/Million', 'Deaths/Million', 'Total Tests',
                           'Tests/Million', 'Population', 'Continent', 'N/A', 'N/A', 'N/A']
                # Add the variable to index 8 of the data array
                downloadable_data.insert(8, headers)
                for country_index in range(len(downloadable_data)):
                    for entry_index in range(len(downloadable_data[country_index])):
                        downloadable_data[country_index][entry_index] = downloadable_data[country_index][
                            entry_index].replace(',', '')
                # We get rid of the first 8 entries that aren't countries
                for i in range(len(downloadable_data) - 8):
                    writer.writerow(downloadable_data[i + 8])
            print("Successfully downloaded " + file_name + ".csv file. \n")
        else:
            for country in countries:
                if query == country.name:
                    print("Country Rank: " + country.rank)
                    print("Total Cases: " + country.tot_cases)
                    print("New Cases: " + country.new_cases)
                    print("Total Deaths: " + country.tot_deaths)
                    print("New Deaths: " + country.new_deaths)
                    print("Total Recoveries: " + country.tot_rec)
                    print("Active Cases: " + country.active_cases)
                    print("Total serious/critical cases: " + country.serious)
                    print("Total Cases per Million: " + country.tot_per_mil)
                    print("Total Deaths per Million: " + country.death_per_mil)
                    print("Total Tests: " + country.tot_tests)
                    print("Total Tests per Million: " + country.test_per_mil)
                    print("\n")
                    break
                elif country.name == countries[len(countries) - 1].name and \
                        countries[len(countries) - 1].name != query:
                    print("The name you typed returned no matches in the database.")
                    print("\n")


if __name__ == "__main__":
    main()
